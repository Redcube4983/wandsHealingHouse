@use 'sass:math';
@use 'breakpoint' as *;
@use 'typography' as *;

// 数値のみを取り出す
// 参照：https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number)=='number' and not unitless($number) {
    // @return $number / ($number * 0 + 1);
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

@function percent($size, $base-size: $layout-width-container) {
  @return math.div(strip-unit($size), strip-unit($base-size)) * 100%;
}

@function vw($size, $window_width: $layout-width-canvas) {
  // @return $size / $window_width * 100vw;
  @return math.div(strip-unit($size), strip-unit($window_width)) * 100vw;
}

// remへの計算式（16pxを基準としている。10pxを基準とする場合は16を10に変更する）
@function rem($pixels, $font-size: $fz-root) {
  // @return $pixels / 16 * 1rem;
  @return math.div(strip-unit($pixels), strip-unit($font-size)) * 1rem;
}

// ブロックのフォントサイズ基準にエレメントのサイズを作成する
@function em($pixels, $block-font-size: $fz-root) {
  @return math.div(strip-unit($pixels), strip-unit($block-font-size)) * 1em;
}

// letter-spacing計算
@function lsp($letter_spacing, $font_size) {
  // @return $letter_spacing / $font_size * 1em;
  @return math.div(strip-unit($letter_spacing), strip-unit($font_size)) * 1em;
}

// line-height を計算
@function lh($line_height, $font_size) {
  @return math.div(strip-unit($line_height), strip-unit($font_size));
}

// line-height を打ち消したmarginを計算する
// $margin 確保したいmargin
// $line_height 設定されているline-height
// $font_size フォントサイズ
@function margin($margin, $line_height: $lh-base, $font_size: $fz-base) {
  // @return ($margin - (($line_height - 1) * $font_size) / 2);
  @return math.div(strip-unit($margin) - ((strip-unit($line_height) - 1) * strip-unit($font_size)), 2);
}

// カンプの左右に寄せるレイアウト
@function layout-canvas-side($canvas: $layout-width-canvas, $inner: $layout-width-container, $pd: $pd-tab, $vw: var(--vw, 100vw)) {
  @return clamp((#{$inner} - #{$canvas}) / 2, (#{$inner} - #{$vw}) / 2, #{$pd} * -1);
}

// 親要素を超えて画面端に寄せる
@function layout-fullWidth($pd: $pd-tab, $container: $layout-width-container) {
  @return min($pd*-1, (#{$container} - var(--vw, 100vw))/2);
}

// line-heightを考慮したマージンを計算する
// 使い方: `margin-top: rem(margin(30, 20, 32));`
// もしくは上のテキストと自分自身のテキストにそれぞれline-heightがあるとき
// `margin-top: rem(margin(30, 20, 32, 14, 24));`
@function margin($margin, $fz, $lh, $fz2: 0, $lh2: 0) {
  @return $margin - math.div(($lh - $fz), 2) - math.div(($lh2 - $fz2), 2);
}